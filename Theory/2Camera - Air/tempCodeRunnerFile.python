import re

def num_to_prefix(num):
    prefixes = {
        1: "Meth",
        2: "Eth",
        3: "Prop",
        4: "But",
        5: "Pent",
        6: "Hex",
        7: "Hept",
        8: "Oct",
        9: "Non",
        10: "Dec"
    }
    return prefixes.get(num, "")

def iupac_name(compound):
    # Check for alkane
    alkane_regex = re.compile(r"CH3(CH2)*CH3")
    alkane_match = alkane_regex.match(compound)
    if alkane_match:
        num_carbons = compound.count("CH2") + 2
        prefix = num_to_prefix(num_carbons)
        return f"{prefix}ane"

    # Check for alkene
    alkene_regex = re.compile(r"CH2CH(CH2)*CH3")
    alkene_match = alkene_regex.match(compound)
    if alkene_match:
        num_carbons = compound.count("CH2") + 1
        prefix = num_to_prefix(num_carbons)
        return f"{prefix}ene"

    # Check for alkyne
    alkyne_regex = re.compile(r"CH([A-Za-z0-9]*)CCH")
    alkyne_match = alkyne_regex.match(compound)
    if alkyne_match:
        num_carbons = compound.count("CH") + 1
        prefix = num_to_prefix(num_carbons)
        return f"{prefix}yne"

    # Check for alcohol
    alcohol_regex = re.compile(r"CH3(CH2)*OH")
    alcohol_match = alcohol_regex.match(compound)
    if alcohol_match:
        num_carbons = compound.count("CH2") + 1
        prefix = num_to_prefix(num_carbons)
        return f"{prefix}anol"

    # Check for carboxylic acid
    carboxylic_acid_regex = re.compile(r"CH3(CH2)*COOH")
    carboxylic_acid_match = carboxylic_acid_regex.match(compound)
    if carboxylic_acid_match:
        num_carbons = compound.count("CH2") + 1 + 1
        prefix = num_to_prefix(num_carbons)
        return f"{prefix}anoic acid"

    # Add more functional groups and corresponding regular expressions here

    # If no match is found, return an error message
    return "Invalid compound format"

# Test cases
compound1 = "CH3CH2CH3"  # Alkane
compound2 = "CH2CHCH3"  # Alkene
compound3 = "CHCHCCH"  # Alkyne
compound4 = "CH3CH2OH"  # Alcohol
compound5 = "CH3CH2COOH"  # Carboxylic acid

print(iupac_name(compound1))  # Output: Propane
print(iupac_name(compound2))  # Output: Propene
print(iupac_name(compound3))  # Output: Propyne
print(iupac_name(compound4))  # Output: Ethanol
print(iupac_name(compound5))  # Output: Propanoic acid

print(iupac_name("CH3CHOHCH3"))